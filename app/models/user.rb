# == Schema Information
#
# Table name: users
#
#  id         :integer          not null, primary key
#  name       :string(255)
#  email      :string(255)
#  created_at :datetime         not null
#  updated_at :datetime         not null
#

# The above is being generated by the 'annotate' gem, listed in the Gem File. It adds comments containing the data model to the model file
# Run annotate again any time the data model changes to see the comments get updated


class User < ActiveRecord::Base                                      # User class inherits from ActiveRecord::Base, which means the User model    
                                                                     # automatically has all the functionlaity of the ActiveRecord::Base 
  
  attr_accessible :name, :email, :password, :password_confirmation   # Here we see that we create restricted access to the attributes with 'attr_accessor'
  has_secure_password
  
  # before_save { |user| user.email = email.downcase }
  before_save { email.downcase! }                                     # an alternate implementation of the 'before_save' callback 
  before_save :create_remember_token
  
  validates :name, presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, 
            format: { with: VALID_EMAIL_REGEX },
            uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true
  
  private  # HELLO THIS ONE IS PROVIATE!!!!!!!!!!!!!!!!
    def create_remember_token
      self.remember_token = SecureRandom.urlsafe_base64
    end
end
